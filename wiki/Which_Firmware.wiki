#summary Which Firmware Should I Use? Or Works Best?

= Introduction =
A popular set of questions on the forum are:

 * Is the Ducky ready-to-go when delivered? 
 * What languages are supported?
 * Do I really need to re-flash the Ducky?
 * Which firmware works best? 
 * What firmware should I use?

These will be answered in turn below:

=Is the Ducky ready-to-go? =
* Yes * - The Ducky is pre-built with the _duck.hex_ firmware.

=What languages are supported=
==Firmware==
The Firmware is designed to be language independent.

*Exception*: Composite payloads, as the HID keyboard emulation is hard-coded into the firmware.
==Encoder==
This is where different languages/keyboard mappings come into effect.  Currently supported keyboards are:
 * US (United States)
 * UK (United Kingdom)
 * DE (German)
 * DA (Danish)
 * FR (French)
 * BE (Belgian)
 * NO (Norwegian)
 * PT (Portuguese)
 * SV (Swedish)

If your language/keyboard is not here get on the forums for support and guidance on creating new keyboard mappings.

=Do I really need to re-flash the Ducky=
*No, not really.*

It depends on your purpose for investing in the Ducky.  See below for a description on each firmware image.
=Which Firmware works best/Which should I use?=
This is not an easy question to answer.  

See below for descriptions, reasons, and hints: 
==duck.hex==
Original duck firmware, enhanced to work on all Operating System's (Win,Unix,OSX,Android,+).

==osx.hex==
Virtually identical to _duck.hex_, only difference is VID & PID represent a Mac Keyboard.

==usb.hex==
With support appearing to originally dwindle, and a private side project.  USB.hex turns the Ducky into a USB Mass Storage Device.

Originally mocked, as useless; Some people missed the potential/purpose of this project.  Originally used to bypass device-control software that would black list/whitelist USB devices based off VID and PID codes.  As the Ducky is programmable, so-long-as a valid VID/PID device class was used, the Ducky could bypass popular device-control software. 

Once I had my fun (few months to be honest), I decided to release this publicly, as I thought people were getting upset with the progress on the Ducky.  At least people could convert their Duck into a useful USB drive, rather than have a failed project stuck in a drawer (Folks had forked out originally $80(USD)).

==m_duck.hex==
Based off a request in the forum (Sorry cant remember who asked first?)

I spent many a month trying to work out if payloads could be delivered based on keyboard LEDs, or on push of a Keyboard button that triggers an LED (eg. CAPS_Lock).

This firmware supports multiple-payloads:
 * inject.bin - default payload (will always run first)
 * inject2.bin - NUM_LOCK
 * inject3.bin - CAPS_LOCK

Basically, _inject.bin_ will always be triggered on Ducky insertion.

_inject2/3.bin_ is triggered by ensuring only Num_Lock/Caps_Lock Keyboard LED is lit, followed by pushing the button on the Ducky.

This projects Firmware was nicknamed * The Naked Duck / Naked Ducky Edition * as the Ducky has to be naked for you to push the button and trigger the 2nd/3rd payload.

===Intended Purpose===
One Ducky; Supporting 2x Operating Systems, Or staged Payloads:
 * _inject.bin_ - default file (simple 1-liner "DELAY 5000")
 * _inject2.bin_ - Windows Script/ Payload 2
 * _inject3.bin_ - OSX Script / Payload 3

====Multi OS Support====
So on Windows Host, ensure Num_Lock is Lit, push the Ducky's button to deliver a Windows-based Payload.

On OSX, ensure Caps_Lock is Lit, push the Ducky's button to deliver an OSX-based Payload.

====Multi Payload Support====
By default _inject.bin_ triggers on insertion of the Ducky.

You may depending on installed software (e.g. powershell) want to trigger one of two different payloads.
 * Windows 7+ - Use Num_Lock for inject2.bin to utilise powershell
 * Windows XP - Use Caps_Lock for inject3.bin to utilise other windows binaries (eg tftp to download payloads)

==c_duck_XX.hex==
Currently 2x PoCs for Windows OS's:
 * c_duck_us.hex - Composite Duck US Keyboard 4 Windows
 * c_duck_uk.hex - Composite Duck UK Keyboard 4 Windows 

This was another one of my goals (in addition to several requests).  Got a working PoC in time for the 1-year anniversary! (Originally, I was holding this back as a X-mas gift.  But someone quick spotted it, as I was cleaning up the SVN).  So I decided to publish a little earlier.

Nicknamed * The Twin Duck * as it functions as 2x separate Duckies; its primary function is mass-storage, and the HID attack is triggered through pushing the Ducky's button.

==Why?==
Brings back the ol' Autorun/ USB-Switchblade attacks.

===Function===
The PoC's HID attack is currently hardcoded to _file:///DUCKY/duck_

So you need to rename the SDcard label to DUCKY, and have a Windows script / binary called duck(.exe|.bat|.com).

_More Information is on the Twin_Duck Wiki Page_